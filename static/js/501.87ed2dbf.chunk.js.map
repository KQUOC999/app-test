{"version":3,"file":"static/js/501.87ed2dbf.chunk.js","mappings":"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","sources":["routers/home/Cart_page.js"],"sourcesContent":["\r\nimport React, { useEffect, useState } from 'react';\r\nimport * as Realm from 'realm-web';\r\nimport { Link } from 'react-router-dom';\r\nimport './cart_page.css';\r\n\r\nconst app = new Realm.App({ id: process.env.REACT_APP_REALM_ID });\r\nconst user = app.currentUser\r\n\r\n\r\nconst CartPage = () => {\r\n\r\n  const [total, setTotalPay] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  const [products, setProducts] = useState([]);\r\n\r\n  const [formData, setFormData] = useState({\r\n    fullName: '',\r\n    email: '',\r\n    address: '',\r\n    phoneNumber: ''\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const functionName = \"getProductInCart\";\r\n      const result = await app.currentUser.callFunction(functionName);\r\n      // Lặp qua từng sản phẩm và thêm thông tin tổng thanh toán\r\n      const updatedProducts = result.map(product => ({\r\n        ...product,\r\n        totalPay: product.productCounts * product.sellingPrice // Tính toán tổng thanh toán\r\n      }));\r\n      setProducts(updatedProducts);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.log(error.error);\r\n    }\r\n  };\r\n  \r\n // Hàm để lấy thông tin chi tiết của sản phẩm từ cơ sở dữ liệu hoặc ngữ cảnh của bạn\r\n const getProductDetails_Reduce = async (productId) => {\r\n\r\n  try {\r\n    // Thực hiện truy vấn để lấy thông tin sản phẩm từ cơ sở dữ liệu\r\n\r\n    const result = await app.currentUser.callFunction(\"get_Cart_reduce\", productId);\r\n    \r\n        // Kiểm tra và loại bỏ các thuộc tính circular structure\r\n    const productWithoutCircular = removeCircular(result);\r\n\r\n// Trả về thông tin chi tiết của sản phẩm\r\nreturn productWithoutCircular;\r\n  } catch (error) {\r\n  console.error('Lỗi khi lấy thông tin sản phẩm:', error);\r\n  throw error;\r\n  }\r\n  };\r\n\r\n// Hàm để lấy thông tin chi tiết của sản phẩm từ cơ sở dữ liệu hoặc ngữ cảnh của bạn\r\nconst getProductDetails_Add = async (productId) => {\r\n\r\n  try {\r\n    // Thực hiện truy vấn để lấy thông tin sản phẩm từ cơ sở dữ liệu\r\n\r\n    const result = await app.currentUser.callFunction(\"getCart\", productId);\r\n    \r\n        // Kiểm tra và loại bỏ các thuộc tính circular structure\r\n    const productWithoutCircular = removeCircular(result);\r\n\r\n// Trả về thông tin chi tiết của sản phẩm\r\nreturn productWithoutCircular;\r\n  } catch (error) {\r\n  console.error('Lỗi khi lấy thông tin sản phẩm:', error);\r\n  throw error;\r\n  }\r\n  };\r\n// Hàm loại bỏ circular structure\r\nconst removeCircular = (obj) => {\r\n  const seen = new WeakSet();\r\n  const cleanObj = JSON.parse(JSON.stringify(obj, (key, value) => {\r\n    if (typeof value === 'object' && value !== null) {\r\n      if (seen.has(value)) {\r\n        return;\r\n      }\r\n      seen.add(value);\r\n    }\r\n    return value;\r\n  }));\r\n  return cleanObj;\r\n};\r\nconst handleReduceProduct = async (productId) => {\r\n  try {\r\n      // Lấy chi tiết sản phẩm từ hàm getProductDetails\r\n      const product = await getProductDetails_Reduce(productId);\r\n\r\n      // Nếu sản phẩm tồn tại và có cùng _id với productId\r\n      if (product && product._id.toString() === productId.toString()) {\r\n          // Giảm số lượng mua của sản phẩm trong React state\r\n          product.productCounts = (product.productCounts > 0 ? product.productCounts - 1 : 0);\r\n          product.totalPay      = product.sellingPrice * product.productCounts;\r\n\r\n          if (product.productCounts === 0) {\r\n           // Trả về null để không cập nhật sản phẩm trong React state\r\n           fetchData();\r\n           fetchData1();\r\n            return null\r\n          }\r\n          // Gọi hàm cập nhật số lượng mua sản phẩm trên máy chủ\r\n          await updateProductCountOnServer(productId, product.productCounts, product.totalPay);\r\n\r\n          // Cập nhật UI với số lượng sản phẩm mới\r\n          setProducts(prevProducts => {\r\n              const updatedProducts = prevProducts.map(prevProduct => {\r\n                  if (prevProduct._id === productId) {\r\n                      return { ...prevProduct, productCounts: product.productCounts, totalPay: product.totalPay };\r\n                  }\r\n                  return prevProduct;\r\n              });\r\n\r\n              return updatedProducts;\r\n          });\r\n\r\n          console.log(product.productCounts);\r\n          console.log(productId);\r\n      }\r\n      fetchData1();\r\n      return product;\r\n      \r\n  } catch (error) {\r\n      console.log(\"Lỗi khi cập nhật số lượng sản phẩm:\", error);\r\n      // Xử lý lỗi tại đây nếu cần\r\n  }\r\n};\r\n\r\n  const handleAddProduct = async (productId) => {\r\n    try {\r\n        // Lấy chi tiết sản phẩm từ hàm getProductDetails\r\n        const product = await getProductDetails_Add(productId);\r\n\r\n        // Nếu sản phẩm tồn tại và có cùng _id với productId\r\n        if (product && product._id.toString() === productId.toString()) {\r\n            // Tăng số lượng mua của sản phẩm trong React state\r\n                \r\n          product.productCounts = (product.productCounts || 0) + 1;\r\n          product.totalPay      = product.sellingPrice * product.productCounts;\r\n\r\n          if(product.productCounts === product.quantity)\r\n            {\r\n              product.productCounts = product.quantity;\r\n              window.alert(\"Bạn đã đạt đến giới hạn mua!\")\r\n            }\r\n              \r\n            // Gọi hàm cập nhật số lượng mua sản phẩm trên máy chủ\r\n            await updateProductCountOnServer(productId, product.productCounts, product.totalPay);\r\n\r\n                  // Cập nhật UI với số lượng sản phẩm mới\r\n            setProducts(prevProducts => {\r\n              const updatedProducts = prevProducts.map(prevProduct => {\r\n                if (prevProduct._id === productId) {\r\n                  return { ...prevProduct, productCounts: product.productCounts, totalPay: product.totalPay};\r\n                }\r\n                return prevProduct;\r\n              });\r\n              \r\n              return updatedProducts;\r\n            });\r\n\r\n          console.log(product.productCounts);\r\n          console.log(productId);\r\n        }\r\n        fetchData1();\r\n        return product;\r\n        \r\n    } catch (error) {\r\n        console.log(\"Lỗi khi cập nhật số lượng sản phẩm:\", error);\r\n        // Xử lý lỗi tại đây nếu cần\r\n    }\r\n    \r\n};\r\n\r\n  const updateProductCountOnServer = async (productId, productCounts, totalPay) => {\r\n    const functionName = \"updateProductCount\";\r\n    const args = { productId, productCounts, totalPay };\r\n    try {\r\n      // Gọi hàm của Realm Function để cập nhật số lượng mua sản phẩm trên máy chủ\r\n      await app.currentUser.callFunction(functionName, args);\r\n      console.log(\"Đã cập nhật số lượng mua sản phẩm trên máy chủ.\");\r\n    } catch (error) {\r\n      console.log(\"Lỗi khi gọi API cập nhật số lượng mua sản phẩm:\", error);\r\n      // Ném lỗi nếu không tìm thấy sản phẩm với ID đã cho\r\n      throw(error.error)\r\n    }\r\n  };\r\n///////Make form submit Payment \r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  const handleFormSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      // Gọi API để lấy thông tin sản phẩm\r\n      const products = await app.currentUser.callFunction(\"getProductInCart\");\r\n\r\n    // Tạo một đối tượng Date mới đại diện cho thời gian hiện tại  \r\n      const currentDate = new Date(); \r\n      const year = currentDate.getFullYear(); // Lấy năm\r\n      const month = currentDate.getMonth() + 1; // Lấy tháng (0 - 11, cần cộng thêm 1 để hiển thị đúng)\r\n      const day = currentDate.getDate(); // Lấy ngày\r\n      const hours = currentDate.getHours(); // Lấy giờ\r\n      const minutes = currentDate.getMinutes(); // Lấy phút\r\n\r\n    // Tạo định dạng chuỗi cho ngày và thời gian\r\n      const currentDateTimeString = `${hours}:${minutes} ${day}/${month}/${year} `;\r\n      \r\n    // Tạo một mảng để lưu trữ dữ liệu của tất cả các sản phẩm\r\n      const dataToSend = {\r\n        date: currentDateTimeString,\r\n        user: user.id,\r\n        totalPays: products ? parseFloat(total) : 0,\r\n        products: products.map((product) => ({\r\n          productName: product.productName,\r\n          productType: product.productType,\r\n          productimageUrl: product.imageUrl,\r\n          sellingPrice: product.sellingPrice,\r\n          productCounts: product.productCounts,\r\n          totalPay: product.totalPay\r\n        })),\r\n        fullName: formData.fullName,\r\n        email: formData.email,\r\n        address: formData.address,\r\n        phoneNumber: formData.phoneNumber\r\n      };\r\n  \r\n      // Gửi đối tượng dữ liệu lên server\r\n      const response = await app.currentUser.callFunction(\"submitPayment\", dataToSend);\r\n      //Làm mới giở hàng bằng cách xóa hết sản phẩm chứa trong giở sau khi hoàn tất thanh toán\r\n      const resfresh = await app.currentUser.callFunction(\"refreshCart\");\r\n      console.log(resfresh);\r\n      //Gọi lại API giỏ hàng để lấy dữ liệu làm mới từ server\r\n      fetchData();\r\n      fetchData1();\r\n      window.location.reload();\r\n      console.log(response);\r\n\r\n      // Xử lý response từ server (nếu cần)\r\n      \r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  useEffect(() => {\r\n    fetchData1()\r\n  },[])\r\n\r\n  const fetchData1 = async() => {\r\n    const functionName = \"cart_module\";\r\n    try {\r\n      const res = await user.callFunction(functionName);\r\n      setTotalPay(res?.public?.output?.total.toFixed(2));   \r\n      console.log(res);\r\n    } catch (error) {\r\n      console.log(error.error);\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"cart-page\">\r\n      <Link to={\"/orderingInformation\"}>\r\n        <button className='btn_open_ordering_page'>Đơn hàng</button>\r\n      </Link>\r\n      <div className='containers'>\r\n        {loading ? (\r\n          <p>Đang tải sản phẩm...</p>\r\n        ) : (\r\n          <>\r\n          <ul className='containers_list'>\r\n          <div className=\"product_list\">\r\n          {Array.isArray(products) && products.length > 0 ? (\r\n            products.map((product, index) => (\r\n              <div key={index} className=\"products\">\r\n                <h3>Thông tin sản phẩm {index + 1}:</h3>\r\n                <img src={product.imageUrl} alt={product.imageUrl} />\r\n                <p><strong>Tên sản phẩm:</strong> {product.productName}</p>\r\n                <p><strong>Loại sản phẩm:</strong> {product.productType}</p>\r\n                <p><strong>Số lượng còn lại:</strong> {product.quantity}</p>\r\n                <p><strong>Số lượng mua:</strong> {product.productCounts}</p>\r\n                <button className='btn' onClick={() => handleReduceProduct(product._id)}> - </button>\r\n                <button className='btn'onClick={() => handleAddProduct(product._id)}> + </button>\r\n                <p><strong>Giá bán:</strong> ${product.sellingPrice}</p>\r\n                <p><strong>Tổng thanh toán:</strong> ${product?.totalPay}</p>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p>Giỏ hàng chưa có sản phẩm nào</p>\r\n          )}\r\n        </div>\r\n          </ul>\r\n            <form className='information_cart' onSubmit={handleFormSubmit}>\r\n              <input type=\"text\" name=\"fullName\" value={formData.fullName} onChange={handleInputChange} placeholder=\"Họ và tên\" required />\r\n              <input type=\"email\" name=\"email\" value={formData.email} onChange={handleInputChange} placeholder=\"Email\" required />\r\n              <input type=\"text\" name=\"address\" value={formData.address} onChange={handleInputChange} placeholder=\"Địa chỉ\" required />\r\n              <input type=\"tel\" name=\"phoneNumber\" value={formData.phoneNumber} onChange={handleInputChange} placeholder=\"Số điện thoại\" required />\r\n              <p>Tổng thanh toán: ${total}</p>\r\n              <button type=\"submit\" onSubmit={handleFormSubmit}>Thanh toán</button>\r\n            </form>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CartPage;"],"names":["app","Realm","id","process","user","currentUser","CartPage","total","setTotalPay","useState","loading","setLoading","products","setProducts","formData","setFormData","fullName","email","address","phoneNumber","useEffect","fetchData","async","functionName","updatedProducts","callFunction","map","product","totalPay","productCounts","sellingPrice","error","console","log","removeCircular","obj","seen","WeakSet","JSON","parse","stringify","key","value","has","add","handleReduceProduct","result","productId","getProductDetails_Reduce","_id","toString","fetchData1","updateProductCountOnServer","prevProducts","prevProduct","handleAddProduct","getProductDetails_Add","quantity","window","alert","args","handleInputChange","e","name","target","handleFormSubmit","preventDefault","currentDate","Date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","dataToSend","date","concat","totalPays","parseFloat","productName","productType","productimageUrl","imageUrl","response","resfresh","location","reload","_res$public","_res$public$output","res","public","output","toFixed","_jsxs","className","children","_jsx","Link","to","_Fragment","Array","isArray","length","index","src","alt","onClick","onSubmit","type","onChange","placeholder","required"],"sourceRoot":""}