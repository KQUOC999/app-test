{"version":3,"file":"static/js/711.1d4a007b.chunk.js","mappings":"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","sources":["routers/home/logout.js","routers/home/page.js"],"sourcesContent":["import React, { useState, useEffect} from 'react';\r\nimport * as Realm from 'realm-web';\r\nimport Form from '@rjsf/core';\r\nimport validator from '@rjsf/validator-ajv8';\r\nimport Home from './page';\r\n\r\n\r\n\r\nconst app = new Realm.App({ id: process.env.REACT_APP_REALM_ID });\r\nconst user = app.currentUser;\r\n\r\nconst schema = {\r\n  title: 'Register',\r\n  type: 'object',\r\n  required: ['email', 'password'],\r\n  properties: {\r\n    email: { type: 'string', title: 'Email', format: 'email' },\r\n    password: { type: 'string', title: 'Password', minLength: 6, format: 'password' },\r\n  },\r\n};\r\n\r\nconst loginSchema = {\r\n  title: 'Login',\r\n  type: 'object',\r\n  required: ['email', 'password'],\r\n  properties: {\r\n    email: { type: 'string', title: 'Email', format: 'email' },\r\n    password: { type: 'string', title: 'Password', minLength: 6, format: 'password' },\r\n  },\r\n};\r\n\r\nconst Logout = () => {\r\n  const [ , setUser] = useState(null);\r\n  const [showRegisterForm, setShowRegisterForm] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Thêm state mới để kiểm tra trạng thái đăng nhập\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n        try {\r\n          // Authenticate the user\r\n          if (user) { // Kiểm tra xem user có tồn tại không trước khi gọi fetchUser\r\n            setUser(null);\r\n            setIsLoggedIn(false);\r\n            await user.logOut(); // Trước khi đăng xuất, kiểm tra user có tồn tại\r\n            setTimeout(() => {\r\n              window.location.href = '/logout'; // Navigate to logout page\r\n            }, 1000); // Delay of 1 second (1000 milliseconds)\r\n          }\r\n        } catch (error) {\r\n          console.log(error.error);\r\n        }\r\n    };\r\n\r\n    if (user) {\r\n        fetchUser();\r\n      }\r\n      \r\n  }, []); // Thêm logOut vào danh sách dependency của useEffect\r\n\r\n  const register = async (form) => {\r\n    const { email, password } = form.formData;\r\n    try {\r\n      await app.emailPasswordAuth.registerUser({ email, password });\r\n      window.location.reload(true);\r\n    } catch (error) {\r\n      console.log(error.error);\r\n    }\r\n  };\r\n\r\n  const login = async (form) => {\r\n    const { email, password } = form.formData;\r\n    try {\r\n      const credentials = Realm.Credentials.emailPassword(email, password);\r\n      const loggedInUser = await app.logIn(credentials);\r\n      setLoading(false);\r\n      setUser(loggedInUser);\r\n      setIsLoggedIn(true); // Đã đăng nhập thành công\r\n      window.location.href = '/app-test';\r\n    \r\n    } catch (error) {\r\n      console.log(error.error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {user ? (\r\n        <>\r\n          {isLoggedIn && loading ? <p>Loading...</p> : <Home />}\r\n        </>\r\n      ) : (\r\n        <div className=\"overlay-container\">\r\n          <div className=\"overlay-content\">\r\n            <div className=\"container_form\">\r\n              {!showRegisterForm ? (\r\n                <>\r\n                  <button className=\"button1\" onClick={() => setShowRegisterForm(true)}>\r\n                    Đăng ký\r\n                  </button>\r\n                  <Form\r\n                    className=\"custom-form\"\r\n                    schema={loginSchema}\r\n                    validator={validator}\r\n                    onSubmit={login}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <button className=\"button1\" onClick={() => setShowRegisterForm(false)}>\r\n                    Quay lại\r\n                  </button>\r\n                  <Form\r\n                    className=\"custom-form\"\r\n                    schema={schema}\r\n                    validator={validator}\r\n                    onSubmit={register}\r\n                  />\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logout;\r\n","import React, {useEffect, useState} from 'react';\r\nimport *as Realm from 'realm-web';\r\n\r\nimport Form from '@rjsf/core';\r\nimport validator from '@rjsf/validator-ajv8';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nconst app = new Realm.App({id:process.env.REACT_APP_REALM_ID})\r\nconst user = app.currentUser\r\n\r\n// Schema\r\nconst schema = {\r\n  title: 'Register',\r\n  type: 'object',\r\n  required: ['email', 'password'],\r\n  properties: {\r\n    email: { type: 'string', title: 'Email', format: 'email' },\r\n    password: { type: 'string', title: 'Password', minLength: 6, format: 'password'},\r\n  },\r\n};\r\n\r\nconst Login = {\r\n  title: 'Login',\r\n  type: 'object',\r\n  required: ['email', 'password'],\r\n  properties: {\r\n    email: { type: 'string', title: 'Email', format: 'email' },\r\n    password: { type: 'string', title: 'Password', minLength: 6, format: 'password'},\r\n  },\r\n};\r\n/*\r\nconst Sum = {\r\n  title: 'Sum',\r\n  type: 'object',\r\n  required: ['a', 'b'],\r\n  properties: {\r\n    a: { type: 'number', title: 'A'},\r\n    b: { type: 'number', title: 'B'},\r\n  },\r\n};\r\n*/\r\n////////////////////////////////////////////////////////////////////////////\r\n// async\r\nconst Home = () => {\r\n\r\n  const [showRegisterForm, setShowRegisterForm] = useState(false);\r\n\r\n  const [products, setProducts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [cartCount, setCartCount] = useState(0);\r\n  const [cartItems, setCartItems] = useState([]);\r\n\r\n  const [ , setProductCounts] = useState({});\r\n  const [ , setProducttotalPay] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n    fetchData();\r\n    }\r\n  }, [])\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const functionName = \"getAllProducts\";\r\n      const result = await app.currentUser.callFunction(functionName);\r\n      setProducts(result);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.log(error.error);\r\n      setLoading(false);\r\n    }\r\n  }\r\n  const addToCart = async (productId) => {\r\n    try {\r\n      // Gọi hàm để lấy thông tin chi tiết của sản phẩm từ máy chủ\r\n      const product = await getProductDetails(productId);\r\n  \r\n      // Kiểm tra xem sản phẩm có tồn tại không\r\n      if (!product) {\r\n        throw new Error(\"Không tìm thấy thông tin sản phẩm.\");\r\n      }\r\n      // Cập nhật giỏ hàng\r\n      setCartCount(cartCount + 1);\r\n      setCartItems([...cartItems, { id: product._id, productName: product.productName }]);\r\n\r\n      // Cập nhật số lượng sản phẩm được thêm vào giỏ hàng\r\n      setProductCounts(prevCounts => {\r\n        const updatedCounts = { ...prevCounts };\r\n        updatedCounts[productId] = (updatedCounts[productId] || 0) + 1;\r\n        //console.log(productCounts);\r\n        return updatedCounts;\r\n          \r\n      });\r\n      // Cập nhật số lượng sản phẩm được thêm vào giỏ hàng\r\n      setProducttotalPay(prevCounts => {\r\n        const updatedtotalPay = { ...prevCounts };\r\n        //updatedtotalPay[productId] = (updatedtotalPay[productId] || 0) + 1;\r\n        //console.log(productCounts);\r\n        return updatedtotalPay;\r\n          \r\n      });\r\n    } catch (error) {\r\n      console.error('Lỗi khi thêm vào giỏ hàng:', error);\r\n      // Xử lý lỗi ở đây, ví dụ: hiển thị thông báo lỗi cho người dùng\r\n    }\r\n  };\r\n    // Hàm để lấy thông tin chi tiết của sản phẩm từ cơ sở dữ liệu hoặc ngữ cảnh của bạn\r\n    const getProductDetails = async (productId) => {\r\n\r\n      try {\r\n        // Thực hiện truy vấn để lấy thông tin sản phẩm từ cơ sở dữ liệu\r\n\r\n        const result = await app.currentUser.callFunction(\"getCart\", productId);\r\n        \r\n            // Kiểm tra và loại bỏ các thuộc tính circular structure\r\n        const productWithoutCircular = removeCircular(result);\r\n\r\n    // Trả về thông tin chi tiết của sản phẩm\r\n    return productWithoutCircular;\r\n  } catch (error) {\r\n    console.error('Lỗi khi lấy thông tin sản phẩm:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Hàm loại bỏ circular structure\r\nconst removeCircular = (obj) => {\r\n  const seen = new WeakSet();\r\n  const cleanObj = JSON.parse(JSON.stringify(obj, (key, value) => {\r\n    if (typeof value === 'object' && value !== null) {\r\n      if (seen.has(value)) {\r\n        return;\r\n      }\r\n      seen.add(value);\r\n    }\r\n    return value;\r\n  }));\r\n  return cleanObj;\r\n};\r\n  //Register\r\n  const Register = async (form) =>{\r\n\r\n    const {email, password} = form?.formData\r\n\r\n    try {\r\n\r\n      await app.emailPasswordAuth.registerUser({email, password});\r\n      window.location.reload(true)\r\n\r\n    } catch (error) {\r\n      console.log(error.error)\r\n    }\r\n  }\r\n\r\n  //Login\r\n    const Loginn = async (form) =>{\r\n\r\n      const {email, password} = form?.formData\r\n  \r\n      try {\r\n        // Create an API Key credential\r\n        const credentials = Realm.Credentials.emailPassword(email, password);\r\n        // Authenticate the user\r\n        await app.logIn(credentials);\r\n        window.location.reload(true)\r\n  \r\n      } catch (error) {\r\n        console.log(error.error)\r\n\r\n      }\r\n  }\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////\r\n  //Return Result\r\n  return (\r\n    <div>\r\n      {user? (\r\n        \r\n      <div>\r\n\r\n      \r\n        {/* Kiểm tra isLoading để xem liệu dữ liệu sản phẩm đang được tải hay không */}\r\n        {loading ? (\r\n          <p>Đang tải sản phẩm...</p>\r\n        ) : (\r\n         <div className='product'>\r\n              <div className=\"cart-icon\">\r\n              {/* Sử dụng Link để điều hướng đến trang giỏ hàng */}\r\n              <Link to={\"/cart\"}>\r\n                <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRNjsW9hOm9ohsN9Mzhpc-BA-L1hRFAX_GV_rpBrO3GDbrniV0UUD76niBFTA&s\" alt='img_cart_icon'></img>\r\n                <span className=\"cart-count\">{cartCount}</span>\r\n              </Link>\r\n          </div>\r\n            <ul>\r\n              {/* Duyệt qua danh sách sản phẩm và hiển thị */}\r\n              {products.map((product) => (\r\n                <li key={product._id}>\r\n                    <img src={product.imageUrl} alt={product.productName} />\r\n                    <h2>{product.productName}</h2>\r\n                    <p>{product.productType}</p>\r\n                    <p>Giá: ${product.sellingPrice}</p>\r\n                    <p>Số lượng: {product.quantity}</p>\r\n                    <button className=\"add-to-cart-btn\" onClick={() => addToCart(product._id)}>Thêm vào giỏ hàng</button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n    </div>\r\n\r\n      ) : (\r\n      <div className=\"overlay-container\">\r\n        <div className=\"overlay-content\">\r\n          <div className='container_form'>\r\n          {!showRegisterForm ? (\r\n            <>\r\n              <button className=\"button1\" onClick={() =>\r\n                setShowRegisterForm(true)}>Đăng ký</button>\r\n\r\n              <Form\r\n                className=\"custom-form\"\r\n                schema={Login}\r\n                validator={validator}\r\n                onSubmit={Loginn}\r\n              />\r\n            </>\r\n          ) : (\r\n              <>\r\n                <button className=\"button1\" onClick={() => \r\n                  setShowRegisterForm(false)}>Quay lại</button>\r\n                <Form\r\n                  className=\"custom-form\"\r\n                  schema={schema}\r\n                  validator={validator}\r\n                  onSubmit={Register}\r\n                />\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      )}\r\n      \r\n    </div>  \r\n  )\r\n};\r\n\r\nexport default Home;"],"names":["app","Realm","id","process","user","currentUser","schema","title","type","required","properties","email","format","password","minLength","loginSchema","Logout","setUser","useState","showRegisterForm","setShowRegisterForm","loading","setLoading","isLoggedIn","setIsLoggedIn","useEffect","async","logOut","setTimeout","window","location","href","error","console","log","fetchUser","_jsx","children","_Fragment","Home","className","_jsxs","onClick","Form","validator","onSubmit","form","formData","emailPasswordAuth","registerUser","reload","credentials","emailPassword","loggedInUser","logIn","Login","products","setProducts","cartCount","setCartCount","cartItems","setCartItems","setProductCounts","setProducttotalPay","fetchData","functionName","result","callFunction","getProductDetails","productId","removeCircular","obj","seen","WeakSet","JSON","parse","stringify","key","value","has","add","Link","to","src","alt","map","product","imageUrl","productName","productType","sellingPrice","quantity","Error","_id","prevCounts","updatedCounts","addToCart"],"sourceRoot":""}